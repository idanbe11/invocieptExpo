{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from \"./useNavigation\";\nimport usePreventRemoveContext from \"./usePreventRemoveContext\";\nimport useRoute from \"./useRoute\";\nexport default function usePreventRemove(preventRemove, callback) {\n  var _React$useState = React.useState(function () {\n    return nanoid();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      id = _React$useState2[0];\n\n  var navigation = useNavigation();\n\n  var _useRoute = useRoute(),\n      routeKey = _useRoute.key;\n\n  var _usePreventRemoveCont = usePreventRemoveContext(),\n      setPreventRemove = _usePreventRemoveCont.setPreventRemove;\n\n  React.useEffect(function () {\n    setPreventRemove(id, routeKey, preventRemove);\n    return function () {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  var beforeRemoveListener = useLatestCallback(function (e) {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener);\n  }, [navigation, beforeRemoveListener]);\n}","map":{"version":3,"sources":["usePreventRemove.tsx"],"names":["React","nanoid","navigation","useNavigation","key","routeKey","useRoute","setPreventRemove","usePreventRemoveContext","beforeRemoveListener","useLatestCallback","e","callback","data"],"mappings":";AACA,SAAA,MAAA,QAAA,mBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,iBAAA,MAAA,qBAAA;AAGA,OAAA,aAAA;AACA,OAAA,uBAAA;AACA,OAAA,QAAA;AAQA,eAAe,SAAA,gBAAA,CAAA,aAAA,EAAA,QAAA,EAGb;EACA,sBAAaA,KAAK,CAALA,QAAAA,CAAe;IAAA,OAAMC,MAAlC,EAA4B;EAAA,CAAfD,CAAb;EAAA;EAAA,IAAM,EAAN;;EAEA,IAAME,UAAU,GAAGC,aAAnB,EAAA;;EACA,gBAA0BG,QAA1B,EAAA;EAAA,IAAaD,QAAb,aAAQD,GAAR;;EAEA,4BAA6BI,uBAA7B,EAAA;EAAA,IAAQD,gBAAR,yBAAQA,gBAAR;;EAEAP,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpBO,gBAAgB,CAAA,EAAA,EAAA,QAAA,EAAhBA,aAAgB,CAAhBA;IACA,OAAO,YAAM;MACXA,gBAAgB,CAAA,EAAA,EAAA,QAAA,EAAhBA,KAAgB,CAAhBA;IADF,CAAA;EAFFP,CAAAA,EAKG,CAAA,gBAAA,EAAA,EAAA,EAAA,QAAA,EALHA,aAKG,CALHA;EAOA,IAAMS,oBAAoB,GAAGC,iBAAiB,CAE3CC,UAAAA,CAAD,EAAO;IACP,IAAI,CAAJ,aAAA,EAAoB;MAClB;IACD;;IAEDA,CAAC,CAADA,cAAAA;IAEAC,QAAQ,CAAC;MAAEC,IAAI,EAAEF,CAAC,CAACE;IAAV,CAAD,CAARD;EATF,CAA8C,CAA9C;EAYAZ,KAAK,CAALA,SAAAA,CACE;IAAA,OAAME,UAAN,KAAA,IAAMA,IAAAA,UAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,UAAU,CAAVA,WAAAA,CAAAA,cAAAA,EADRF,oBACQE,CAAN;EAAA,CADFF,EAEE,CAAA,UAAA,EAFFA,oBAEE,CAFFA;AAID","sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}