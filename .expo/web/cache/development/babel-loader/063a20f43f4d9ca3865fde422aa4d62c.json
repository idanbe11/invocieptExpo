{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"names":["canUseDOM","isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","window","matchMedia","isReduceMotionEnabled","matches","addChangeListener","fn","addEventListener","addListener","removeChangeListener","removeEventListener","removeListener","handlers","AccessibilityInfo","fetch","eventName","handler","listener","event","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"sources":["C:/Users/oplati/Documents/GitHub/invocieptExpo/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\r\n\r\nfunction isScreenReaderEnabled() {\r\n  return new Promise(function (resolve, reject) {\r\n    resolve(true);\r\n  });\r\n}\r\n\r\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\r\n\r\nfunction isReduceMotionEnabled() {\r\n  return new Promise(function (resolve, reject) {\r\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\r\n  });\r\n}\r\n\r\nfunction addChangeListener(fn) {\r\n  if (prefersReducedMotionMedia != null) {\r\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\r\n  }\r\n}\r\n\r\nfunction removeChangeListener(fn) {\r\n  if (prefersReducedMotionMedia != null) {\r\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\r\n  }\r\n}\r\n\r\nvar handlers = {};\r\nvar AccessibilityInfo = {\r\n  /**\r\n   * Query whether a screen reader is currently enabled.\r\n   *\r\n   * Returns a promise which resolves to a boolean.\r\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\r\n   */\r\n  isScreenReaderEnabled: isScreenReaderEnabled,\r\n\r\n  /**\r\n   * Query whether the user prefers reduced motion.\r\n   *\r\n   * Returns a promise which resolves to a boolean.\r\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\r\n   */\r\n  isReduceMotionEnabled: isReduceMotionEnabled,\r\n\r\n  /**\r\n   * Deprecated\r\n   */\r\n  fetch: isScreenReaderEnabled,\r\n\r\n  /**\r\n   * Add an event handler. Supported events: reduceMotionChanged\r\n   */\r\n  addEventListener: function addEventListener(eventName, handler) {\r\n    if (eventName === 'reduceMotionChanged') {\r\n      if (!prefersReducedMotionMedia) {\r\n        return;\r\n      }\r\n\r\n      var listener = function listener(event) {\r\n        handler(event.matches);\r\n      };\r\n\r\n      addChangeListener(listener);\r\n      handlers[handler] = listener;\r\n    }\r\n\r\n    return {\r\n      remove: function remove() {\r\n        return AccessibilityInfo.removeEventListener(eventName, handler);\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Set accessibility focus to a react component.\r\n   */\r\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\r\n\r\n  /**\r\n   * Post a string to be announced by the screen reader.\r\n   */\r\n  announceForAccessibility: function announceForAccessibility(announcement) {},\r\n\r\n  /**\r\n   * Remove an event handler.\r\n   */\r\n  removeEventListener: function removeEventListener(eventName, handler) {\r\n    if (eventName === 'reduceMotionChanged') {\r\n      var listener = handlers[handler];\r\n\r\n      if (!listener || !prefersReducedMotionMedia) {\r\n        return;\r\n      }\r\n\r\n      removeChangeListener(listener);\r\n    }\r\n\r\n    return;\r\n  }\r\n};\r\nexport default AccessibilityInfo;"],"mappings":"AAQA,SAASA,SAAT,QAA0B,+BAA1B;;AAEA,SAASC,qBAAT,GAAiC;EAC/B,OAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;IAC5CD,OAAO,CAAC,IAAD,CAAP;EACD,CAFM,CAAP;AAGD;;AAED,IAAIE,yBAAyB,GAAGL,SAAS,IAAI,OAAOM,MAAM,CAACC,UAAd,KAA6B,UAA1C,GAAuDD,MAAM,CAACC,UAAP,CAAkB,kCAAlB,CAAvD,GAA+G,IAA/I;;AAEA,SAASC,qBAAT,GAAiC;EAC/B,OAAO,IAAIN,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;IAC5CD,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB,CAACI,OAA7B,GAAuC,IAAjE,CAAP;EACD,CAFM,CAAP;AAGD;;AAED,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;EAC7B,IAAIN,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACO,gBAA1B,IAA8C,IAA9C,GAAqDP,yBAAyB,CAACO,gBAA1B,CAA2C,QAA3C,EAAqDD,EAArD,CAArD,GAAgHN,yBAAyB,CAACQ,WAA1B,CAAsCF,EAAtC,CAAhH;EACD;AACF;;AAED,SAASG,oBAAT,CAA8BH,EAA9B,EAAkC;EAChC,IAAIN,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACU,mBAA1B,IAAiD,IAAjD,GAAwDV,yBAAyB,CAACU,mBAA1B,CAA8C,QAA9C,EAAwDJ,EAAxD,CAAxD,GAAsHN,yBAAyB,CAACW,cAA1B,CAAyCL,EAAzC,CAAtH;EACD;AACF;;AAED,IAAIM,QAAQ,GAAG,EAAf;AACA,IAAIC,iBAAiB,GAAG;EAOtBjB,qBAAqB,EAAEA,qBAPD;EAetBO,qBAAqB,EAAEA,qBAfD;EAoBtBW,KAAK,EAAElB,qBApBe;EAyBtBW,gBAAgB,EAAE,SAASA,gBAAT,CAA0BQ,SAA1B,EAAqCC,OAArC,EAA8C;IAC9D,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAI,CAACf,yBAAL,EAAgC;QAC9B;MACD;;MAED,IAAIiB,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;QACtCF,OAAO,CAACE,KAAK,CAACd,OAAP,CAAP;MACD,CAFD;;MAIAC,iBAAiB,CAACY,QAAD,CAAjB;MACAL,QAAQ,CAACI,OAAD,CAAR,GAAoBC,QAApB;IACD;;IAED,OAAO;MACLE,MAAM,EAAE,SAASA,MAAT,GAAkB;QACxB,OAAON,iBAAiB,CAACH,mBAAlB,CAAsCK,SAAtC,EAAiDC,OAAjD,CAAP;MACD;IAHI,CAAP;EAKD,CA5CqB;EAiDtBI,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CAjD5C;EAsDtBC,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CAtDtD;EA2DtBb,mBAAmB,EAAE,SAASA,mBAAT,CAA6BK,SAA7B,EAAwCC,OAAxC,EAAiD;IACpE,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAIE,QAAQ,GAAGL,QAAQ,CAACI,OAAD,CAAvB;;MAEA,IAAI,CAACC,QAAD,IAAa,CAACjB,yBAAlB,EAA6C;QAC3C;MACD;;MAEDS,oBAAoB,CAACQ,QAAD,CAApB;IACD;;IAED;EACD;AAvEqB,CAAxB;AAyEA,eAAeJ,iBAAf"},"metadata":{},"sourceType":"module"}