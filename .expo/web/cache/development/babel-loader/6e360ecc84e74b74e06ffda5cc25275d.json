{"ast":null,"code":"import { isStartish, isMoveish, isEndish } from \"./ResponderEventTypes\";\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar MAX_TOUCH_BANK = 20;\nvar touchBank = [];\nvar touchHistory = {\n  touchBank: touchBank,\n  numberActiveTouches: 0,\n  indexOfSingleActiveTouch: -1,\n  mostRecentTimeStamp: 0\n};\n\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\n\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n\n  return identifier;\n}\n\nfunction recordTouchStart(touch) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchBank[identifier];\n\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchBank[identifier] = createTouchRecord(touch);\n  }\n\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction recordTouchEnd(touch) {\n  var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank());\n  }\n}\n\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank() {\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n\n  return printed;\n}\n\nvar ResponderTouchHistoryStore = {\n  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchMove);\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchStart);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n      if (touchHistory.numberActiveTouches === 1) {\n        for (var i = 0; i < touchBank.length; i++) {\n          var touchTrackToCheck = touchBank[i];\n\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n\n        if (__DEV__) {\n          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  },\n  touchHistory: touchHistory\n};\nexport default ResponderTouchHistoryStore;","map":{"version":3,"names":["isStartish","isMoveish","isEndish","__DEV__","process","env","NODE_ENV","MAX_TOUCH_BANK","touchBank","touchHistory","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timeStamp","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","identifier","console","error","recordTouchStart","recordTouchMove","warn","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","length","ResponderTouchHistoryStore","recordTouchTrack","topLevelType","nativeEvent","changedTouches","forEach","touches","i","touchTrackToCheck","activeRecord"],"sources":["C:/Users/oplati/InvocieptExpo-1/node_modules/react-native-web/src/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\nimport type { Touch, TouchEvent } from './ResponderEventTypes';\r\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\r\n\r\ntype TouchRecord = {|\r\n  touchActive: boolean,\r\n  startPageX: number,\r\n  startPageY: number,\r\n  startTimeStamp: number,\r\n  currentPageX: number,\r\n  currentPageY: number,\r\n  currentTimeStamp: number,\r\n  previousPageX: number,\r\n  previousPageY: number,\r\n  previousTimeStamp: number\r\n|};\r\n\r\n/**\r\n * Tracks the position and time of each active touch by `touch.identifier`. We\r\n * should typically only see IDs in the range of 1-20 because IDs get recycled\r\n * when touches end and start again.\r\n */\r\n\r\nconst __DEV__ = process.env.NODE_ENV !== 'production';\r\nconst MAX_TOUCH_BANK = 20;\r\nconst touchBank: Array<TouchRecord> = [];\r\nconst touchHistory = {\r\n  touchBank,\r\n  numberActiveTouches: 0,\r\n  // If there is only one active touch, we remember its location. This prevents\r\n  // us having to loop through all of the touches all the time in the most\r\n  // common case.\r\n  indexOfSingleActiveTouch: -1,\r\n  mostRecentTimeStamp: 0\r\n};\r\n\r\nfunction timestampForTouch(touch: Touch): number {\r\n  // The legacy internal implementation provides \"timeStamp\", which has been\r\n  // renamed to \"timestamp\".\r\n  return (touch: any).timeStamp || touch.timestamp;\r\n}\r\n\r\n/**\r\n * TODO: Instead of making gestures recompute filtered velocity, we could\r\n * include a built in velocity computation that can be reused globally.\r\n */\r\nfunction createTouchRecord(touch: Touch): TouchRecord {\r\n  return {\r\n    touchActive: true,\r\n    startPageX: touch.pageX,\r\n    startPageY: touch.pageY,\r\n    startTimeStamp: timestampForTouch(touch),\r\n    currentPageX: touch.pageX,\r\n    currentPageY: touch.pageY,\r\n    currentTimeStamp: timestampForTouch(touch),\r\n    previousPageX: touch.pageX,\r\n    previousPageY: touch.pageY,\r\n    previousTimeStamp: timestampForTouch(touch)\r\n  };\r\n}\r\n\r\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\r\n  touchRecord.touchActive = true;\r\n  touchRecord.startPageX = touch.pageX;\r\n  touchRecord.startPageY = touch.pageY;\r\n  touchRecord.startTimeStamp = timestampForTouch(touch);\r\n  touchRecord.currentPageX = touch.pageX;\r\n  touchRecord.currentPageY = touch.pageY;\r\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\r\n  touchRecord.previousPageX = touch.pageX;\r\n  touchRecord.previousPageY = touch.pageY;\r\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\r\n}\r\n\r\nfunction getTouchIdentifier({ identifier }: Touch): number {\r\n  if (identifier == null) {\r\n    console.error('Touch object is missing identifier.');\r\n  }\r\n  if (__DEV__) {\r\n    if (identifier > MAX_TOUCH_BANK) {\r\n      console.error(\r\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\r\n          'performance issues backfilling array locations for all of the indices.',\r\n        identifier,\r\n        MAX_TOUCH_BANK\r\n      );\r\n    }\r\n  }\r\n  return identifier;\r\n}\r\n\r\nfunction recordTouchStart(touch: Touch): void {\r\n  const identifier = getTouchIdentifier(touch);\r\n  const touchRecord = touchBank[identifier];\r\n  if (touchRecord) {\r\n    resetTouchRecord(touchRecord, touch);\r\n  } else {\r\n    touchBank[identifier] = createTouchRecord(touch);\r\n  }\r\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\r\n}\r\n\r\nfunction recordTouchMove(touch: Touch): void {\r\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\r\n  if (touchRecord) {\r\n    touchRecord.touchActive = true;\r\n    touchRecord.previousPageX = touchRecord.currentPageX;\r\n    touchRecord.previousPageY = touchRecord.currentPageY;\r\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\r\n    touchRecord.currentPageX = touch.pageX;\r\n    touchRecord.currentPageY = touch.pageY;\r\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\r\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\r\n  } else {\r\n    console.warn(\r\n      'Cannot record touch move without a touch start.\\n',\r\n      `Touch Move: ${printTouch(touch)}\\n`,\r\n      `Touch Bank: ${printTouchBank()}`\r\n    );\r\n  }\r\n}\r\n\r\nfunction recordTouchEnd(touch: Touch): void {\r\n  const touchRecord = touchBank[getTouchIdentifier(touch)];\r\n  if (touchRecord) {\r\n    touchRecord.touchActive = false;\r\n    touchRecord.previousPageX = touchRecord.currentPageX;\r\n    touchRecord.previousPageY = touchRecord.currentPageY;\r\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\r\n    touchRecord.currentPageX = touch.pageX;\r\n    touchRecord.currentPageY = touch.pageY;\r\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\r\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\r\n  } else {\r\n    console.warn(\r\n      'Cannot record touch end without a touch start.\\n',\r\n      `Touch End: ${printTouch(touch)}\\n`,\r\n      `Touch Bank: ${printTouchBank()}`\r\n    );\r\n  }\r\n}\r\n\r\nfunction printTouch(touch: Touch): string {\r\n  return JSON.stringify({\r\n    identifier: touch.identifier,\r\n    pageX: touch.pageX,\r\n    pageY: touch.pageY,\r\n    timestamp: timestampForTouch(touch)\r\n  });\r\n}\r\n\r\nfunction printTouchBank(): string {\r\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\r\n  if (touchBank.length > MAX_TOUCH_BANK) {\r\n    printed += ' (original size: ' + touchBank.length + ')';\r\n  }\r\n  return printed;\r\n}\r\n\r\nconst ResponderTouchHistoryStore = {\r\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\r\n    if (isMoveish(topLevelType)) {\r\n      nativeEvent.changedTouches.forEach(recordTouchMove);\r\n    } else if (isStartish(topLevelType)) {\r\n      nativeEvent.changedTouches.forEach(recordTouchStart);\r\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\r\n      if (touchHistory.numberActiveTouches === 1) {\r\n        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\r\n      }\r\n    } else if (isEndish(topLevelType)) {\r\n      nativeEvent.changedTouches.forEach(recordTouchEnd);\r\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\r\n      if (touchHistory.numberActiveTouches === 1) {\r\n        for (let i = 0; i < touchBank.length; i++) {\r\n          const touchTrackToCheck = touchBank[i];\r\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\r\n            touchHistory.indexOfSingleActiveTouch = i;\r\n            break;\r\n          }\r\n        }\r\n        if (__DEV__) {\r\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\r\n          if (!(activeRecord != null && activeRecord.touchActive)) {\r\n            console.error('Cannot find single active touch.');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  touchHistory\r\n};\r\n\r\nexport default ResponderTouchHistoryStore;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}