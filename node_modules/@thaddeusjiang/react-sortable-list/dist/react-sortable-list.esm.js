import React from 'react';
import { useSortable, sortableKeyboardCoordinates, SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { useSensors, useSensor, PointerSensor, KeyboardSensor, DndContext, closestCenter } from '@dnd-kit/core';

var SortableItem = function SortableItem(props) {
  var _useSortable = useSortable({
    id: props.id
  }),
      attributes = _useSortable.attributes,
      listeners = _useSortable.listeners,
      setNodeRef = _useSortable.setNodeRef,
      transform = _useSortable.transform,
      transition = _useSortable.transition;

  var style = {
    transform: CSS.Transform.toString(transform),
    transition: transition
  };
  return React.createElement("div", Object.assign({
    ref: setNodeRef,
    style: style
  }, attributes, listeners), props.children);
};

var SortableList = function SortableList(props) {
  var items = props.items,
      setItems = props.setItems,
      children = props.children,
      itemRender = props.itemRender;
  var sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates
  }));
  return React.createElement(DndContext, {
    sensors: sensors,
    collisionDetection: closestCenter,
    onDragEnd: handleDragEnd
  }, React.createElement(SortableContext, {
    items: items,
    strategy: verticalListSortingStrategy
  }, children ? children({
    items: items
  }) : items.map(function (item) {
    return React.createElement(SortableItem, {
      key: item.id,
      id: item.id
    }, itemRender({
      item: item
    }));
  })));

  function handleDragEnd(event) {
    var active = event.active,
        over = event.over;

    if (active.id !== over.id) {
      setItems(function (items) {
        var ids = items.map(function (item) {
          return item.id;
        });
        var oldIndex = ids.indexOf(active.id);
        var newIndex = ids.indexOf(over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  }
};

export { SortableItem, SortableList };
//# sourceMappingURL=react-sortable-list.esm.js.map
