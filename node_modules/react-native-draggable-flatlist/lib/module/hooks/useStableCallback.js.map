{"version":3,"names":["useRef","useCallback","useStableCallback","fn","fnRef","current","identityRetainingFn"],"sources":["useStableCallback.ts"],"sourcesContent":["import { useRef, useCallback } from \"react\";\n\n// Utility hook that returns a function that never has stale dependencies, but\n// without changing identity, as a useCallback with dep array would.\n// Useful for functions that depend on external state, but\n// should not trigger effects when that external state changes.\n\nexport function useStableCallback<T extends (a?: any, b?: any, c?: any) => any>(\n  fn: T\n) {\n  const fnRef = useRef(fn);\n  fnRef.current = fn;\n  const identityRetainingFn = useCallback(\n    (...args: Parameters<T>) => fnRef.current(...args),\n    []\n  );\n  return identityRetainingFn as T;\n}\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,OAApC,C,CAEA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CACLC,EADK,EAEL;EACA,MAAMC,KAAK,GAAGJ,MAAM,CAACG,EAAD,CAApB;EACAC,KAAK,CAACC,OAAN,GAAgBF,EAAhB;EACA,MAAMG,mBAAmB,GAAGL,WAAW,CACrC;IAAA,OAA4BG,KAAK,CAACC,OAAN,CAAc,YAAd,CAA5B;EAAA,CADqC,EAErC,EAFqC,CAAvC;EAIA,OAAOC,mBAAP;AACD"}