{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React from \"react\";\nimport {\n  FlatListProps,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewPropTypes,\n  ViewStyle,\n} from \"react-native\";\nimport { useAnimatedValues } from \"./context/animatedValueContext\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport Animated, { WithSpringConfig } from \"react-native-reanimated\";\nimport { DEFAULT_PROPS } from \"./constants\";\n\nexport type DragEndParams<T> = {\n  data: T[];\n  from: number;\n  to: number;\n};\ntype Modify<T, R> = Omit<T, keyof R> & R;\n\ntype DefaultProps = Readonly<typeof DEFAULT_PROPS>;\n\nexport type DraggableFlatListProps<T> = Modify<\n  FlatListProps<T>,\n  {\n    data: T[];\n    activationDistance?: number;\n    animationConfig?: Partial<WithSpringConfig>;\n    autoscrollSpeed?: number;\n    autoscrollThreshold?: number;\n    containerStyle?: StyleProp<ViewStyle>;\n    debug?: boolean;\n    dragItemOverflow?: boolean;\n    keyExtractor: (item: T, index: number) => string;\n    onDragBegin?: (index: number) => void;\n    onDragEnd?: (params: DragEndParams<T>) => void;\n    onPlaceholderIndexChange?: (placeholderIndex: number) => void;\n    onRelease?: (index: number) => void;\n    onScrollOffsetChange?: (scrollOffset: number) => void;\n    renderItem: RenderItem<T>;\n    renderPlaceholder?: RenderPlaceholder<T>;\n    simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];\n    outerScrollOffset?: Animated.SharedValue<number>;\n    onAnimValInit?: (animVals: ReturnType<typeof useAnimatedValues>) => void;\n    onContainerLayout?: (params: {\n      layout: LayoutChangeEvent[\"nativeEvent\"][\"layout\"];\n      containerRef: React.RefObject<Animated.View>;\n    }) => void;\n  } & Partial<DefaultProps>\n>;\n\nexport type RenderPlaceholder<T> = (params: {\n  item: T;\n  index: number;\n}) => JSX.Element;\n\nexport type RenderItemParams<T> = {\n  item: T;\n  getIndex: () => number | undefined; // This is technically a \"last known index\" since cells don't necessarily rerender when their index changes\n  drag: () => void;\n  isActive: boolean;\n};\n\nexport type RenderItem<T> = (params: RenderItemParams<T>) => React.ReactNode;\n\nexport type AnimatedFlatListType = <T>(\n  props: Animated.AnimateProps<\n    FlatListProps<T> & {\n      ref: React.Ref<FlatList<T>>;\n      simultaneousHandlers?: React.Ref<any> | React.Ref<any>[];\n    }\n  >\n) => React.ReactElement;\n\nexport type CellData = {\n  measurements: {\n    size: number;\n    offset: number;\n  };\n};\n"],"mappings":""}