{"version":3,"names":["useStableCallback","fn","fnRef","useRef","current","identityRetainingFn","useCallback"],"sources":["useStableCallback.ts"],"sourcesContent":["import { useRef, useCallback } from \"react\";\n\n// Utility hook that returns a function that never has stale dependencies, but\n// without changing identity, as a useCallback with dep array would.\n// Useful for functions that depend on external state, but\n// should not trigger effects when that external state changes.\n\nexport function useStableCallback<T extends (a?: any, b?: any, c?: any) => any>(\n  fn: T\n) {\n  const fnRef = useRef(fn);\n  fnRef.current = fn;\n  const identityRetainingFn = useCallback(\n    (...args: Parameters<T>) => fnRef.current(...args),\n    []\n  );\n  return identityRetainingFn as T;\n}\n"],"mappings":"qGAAA,4BAOO,QAASA,kBAAT,CACLC,EADK,CAEL,CACA,GAAMC,MAAK,CAAG,GAAAC,aAAA,EAAOF,EAAP,CAAd,CACAC,KAAK,CAACE,OAAN,CAAgBH,EAAhB,CACA,GAAMI,oBAAmB,CAAG,GAAAC,kBAAA,EAC1B,iBAA4BJ,MAAK,CAACE,OAAN,OAAAF,KAAK,WAAjC,EAD0B,CAE1B,EAF0B,CAA5B,CAIA,MAAOG,oBAAP,CACD"}