"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
//Hooks
const react_1 = require("react");
//Components
const react_native_1 = require("react-native");
//Styles
const index_styles_1 = __importDefault(require("./index.styles"));
//Util
const util_1 = require("../util");
const SwipeSlider = ({ min, max, step = 1, value, onChange, changeEventThrottle, vertical = false, backgroundColor, barColor, style, barStyle, children }) => {
    const [dimensions, setDimensions] = react_1.useState({ width: 0, height: 0 });
    const animation = react_1.useRef(new react_native_1.Animated.Value(value));
    const lastChangeEventCall = react_1.useRef(0);
    const tempValueHandler = react_1.useCallback((_event, gestureState) => {
        const tempValue = util_1.calculateValue(gestureState, dimensions, min, max, step, vertical, value);
        react_native_1.Animated.timing(animation.current, {
            toValue: tempValue,
            duration: 25,
            useNativeDriver: false
        }).start();
        if (!changeEventThrottle || Date.now() - lastChangeEventCall.current < changeEventThrottle) {
            return;
        }
        onChange?.(tempValue);
        lastChangeEventCall.current = Date.now();
    }, [dimensions, min, max, step, vertical, value]);
    const onChangeValueHandler = react_1.useCallback((_event, gestureState) => {
        const tempValue = util_1.calculateValue(gestureState, dimensions, min, max, step, vertical, value);
        react_native_1.Animated.timing(animation.current, {
            toValue: tempValue,
            duration: 50,
            useNativeDriver: false
        }).start();
        onChange?.(tempValue);
    }, [dimensions, min, max, step, vertical, value]);
    const panResponder = react_native_1.PanResponder.create({
        onStartShouldSetPanResponder: () => true,
        onMoveShouldSetPanResponder: () => false,
        onPanResponderMove: tempValueHandler,
        onPanResponderRelease: onChangeValueHandler,
        onPanResponderTerminationRequest: () => false,
        onPanResponderTerminate: onChangeValueHandler
    });
    const onLayoutHandler = react_1.useCallback((event) => {
        setDimensions({
            width: event.nativeEvent.layout.width,
            height: event.nativeEvent.layout.height
        });
    }, [dimensions]);
    react_1.useEffect(() => {
        react_native_1.Animated.timing(animation.current, {
            toValue: value,
            duration: 50,
            useNativeDriver: false
        }).start();
    }, [min, max, value]);
    const interpolatedValue = animation.current.interpolate({
        inputRange: [min, max],
        outputRange: [0, vertical ? dimensions.height : dimensions.width]
    });
    return (<react_native_1.View onLayout={onLayoutHandler} style={[index_styles_1.default.slider, { backgroundColor }, style]} {...panResponder.panHandlers}>
            <react_native_1.Animated.View style={[
        index_styles_1.default.bar,
        {
            backgroundColor: barColor,
            height: vertical ? interpolatedValue : dimensions.height,
            width: vertical ? dimensions.width : interpolatedValue
        },
        barStyle
    ]}/>

            {children}
        </react_native_1.View>);
};
exports.default = SwipeSlider;
//# sourceMappingURL=index.js.map