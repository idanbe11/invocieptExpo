{"version":3,"file":"sortable.cjs.development.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/arraySwap.ts","../src/utilities/getSortedRects.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/rectSwapping.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/hooks/utilities/useDerivedTransform.ts","../src/hooks/useSortable.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends UseDraggableArguments,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n\n    if (activeId !== previous.current.activeId) {\n      previous.current.activeId = activeId;\n    }\n  }, [activeId, isSorting, newIndex, containerId, items]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {active, droppableContainers, collisionRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = entry?.rect.current;\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top + collisionRect.height <= rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top >= rect.top + rect.height) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left >= rect.left + rect.width) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left + collisionRect.width <= rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    const closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId != null) {\n      const newDroppable = droppableContainers.get(closestId);\n      const newNode = newDroppable?.node.current;\n      const newRect = newDroppable?.rect.current;\n\n      if (newNode && newRect) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: collisionRect.width - newRect.width,\n              y: collisionRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","arraySwap","getSortedRects","items","rects","reduce","accumulator","id","index","rect","get","Array","isValidIndex","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","activeNodeRect","fallbackActiveRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","left","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","top","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","clientRects","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","SortableContext","children","userDefinedItems","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useDndContext","useUniqueId","Boolean","useMemo","map","item","isDragging","indexOf","previousItemsRef","useRef","itemsHaveChanged","isEqual","current","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","arr1","arr2","join","defaultNewIndexGetter","defaultAnimateLayoutChanges","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","disabled","node","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useSortable","animateLayoutChanges","attributes","userDefinedAttributes","data","customData","getNewIndex","localStrategy","resizeObserverConfig","globalStrategy","useContext","sortable","itemsAfterCurrentSortable","isOver","setNodeRef","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","getTransition","isKeyboardEvent","undefined","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","droppableContainers","collisionRect","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","entry","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","newDroppable","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","offset","newCoordinates"],"mappings":"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"}